package pathx.ui;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import properties_manager.PropertiesManager;
import static pathx.PathXConstants.*;
import pathx.PathX;
import pathx.data.PathXDataModel;
import pathx.file.PathXFileManager;

/**
 *
 * @author Brian Sabz
 */
public class PathXEventHandler {

    // THE PATH X GAME, IT PROVIDES ACCESS TO EVERYTHING
    private PathXMiniGame game;

    PathXEventHandler(PathXMiniGame initGame) {
        game = initGame;
    }

    /**
     * Called when the user clicks the Settings button.
     */
    public void respondToHomeRequest()
    {       
        // SWITCH TO THE SETTINGS SCREEN SO THE 
        // USER MAY CHOOSE SETTINGS
        game.switchToMenuScreen();        
    }
    
    /**
     * Called when the user clicks the Play button.
     */
    public void respondToPlayAgainRequest()
    {
        // IF A GAME IS IN PROGRESS, THE PLAYER LOSES
        if (game.getDataModel().inProgress())
            game.getDataModel().endGameAsLoss();
        
        // SWITCH TO THE LEVEL SELECT SCREEN SO THE 
        // USER MAY CHOOSE ANOTHER LEVEL
        game.switchToLevelSelectScreen();        
    }
    
    /**
     * Called when the user clicks the Start button.
     */
    public void respondToStartGameRequest()
    {
        // IF A GAME IS NOT IN PROGRESS, START GAME
        if (!(game.getDataModel().inProgress()))
            game.getDataModel().beginGame();       
    }
    
    /**
     * Called when the user clicks the Play Game button.
     */
    public void respondToPlayGameRequest()
    {
        if (game.isCurrentScreenState(GAME_SCREEN_STATE))
        {
        // IF A GAME IS IN PROGRESS, PLAY GAME
        if (game.getDataModel().inProgress())
            game.getDataModel().unpause();
        
        // SWITCH TO THE LEVEL SELECT SCREEN SO THE 
        // USER MAY CHOOSE ANOTHER LEVEL
        game.switchToPauseButton();   
        }
    }
    
    /**
     * Called when the user clicks the Pause button.
     */
    public void respondToPauseGameRequest()
    {
        if (game.isCurrentScreenState(GAME_SCREEN_STATE))
        {
        // IF A GAME IS IN PROGRESS, PAUSE GAME
        if (game.getDataModel().inProgress())
            game.getDataModel().pause();
        
        // SWITCH TO THE LEVEL SELECT SCREEN SO THE 
        // USER MAY CHOOSE ANOTHER LEVEL
        game.switchToPlayButton();   
        }
    }
    
    /**
     * Called when the user clicks the Settings button.
     */
    public void respondToSettingsRequest()
    {       
        // SWITCH TO THE SETTINGS SCREEN SO THE 
        // USER MAY CHOOSE SETTINGS
        game.switchToSettingsScreen();        
    }
    
    /**
     * Called when the user clicks the Help button.
     */
    public void respondToHelpRequest()
    {       
        // SWITCH TO THE SETTINGS SCREEN SO THE 
        // USER MAY CHOOSE SETTINGS
        game.switchToHelpScreen();        
    }
    
    /**
     * Called when the user clicks the close window button.
     */
    public void respondToExitRequest() {
        // IF THE GAME IS STILL GOING ON, END IT AS A LOSS
        if (game.getDataModel().inProgress()) {
            game.getDataModel().endGameAsLoss();
        }
        int answer = JOptionPane.showConfirmDialog(game.getCanvas(), "Are you sure you want to quit?", "Exit",  JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        // AND CLOSE THE ALL
        if(answer == 0){
        System.exit(0);
        }
    }
    
    public void respondtoCloseDialogRequest() {
        // WE ONLY LET THIS HAPPEN IF THE GAME SCREEN IS VISIBLE
        if (game.isCurrentScreenState(GAME_SCREEN_STATE))
        {
            game.closeInfoDialog();
        }
    }
    
    /**
     * Called when the user clicks the Reset button.
     */
    public void respondToResetGameRequest()
    {
        
        JOptionPane.showMessageDialog(game.getCanvas(), "The game as been reset.", "RESET", JOptionPane.PLAIN_MESSAGE);
        // IF THERE IS A GAME UNDERWAY, COUNT IT AS A LOSS
        if (game.getDataModel().inProgress())
        {
            game.getDataModel().endGameAsLoss();
        }
        // RESET THE GAME AND ITS DATA
        else        
        game.reset();
        game.switchToMenuScreen();
    }
    
    /**
     * Called when the user clicks a button to select a level.
     */    
    public void respondToSelectLevelRequest(String levelFile)
    {
        // WE ONLY LET THIS HAPPEN IF THE MENU SCREEN IS VISIBLE
        if (game.isCurrentScreenState(LEVEL_SELECT_SCREEN_STATE))
        {
            // GET THE GAME'S DATA MODEL, WHICH IS ALREADY LOCKED FOR US
            PathXDataModel data = (PathXDataModel)game.getDataModel();
        
            // UPDATE THE DATA
            //PathXFileManager fileManager = game.getFileManager();
            //fileManager.loadLevel(levelFile);
            data.reset(game);

            // GO TO THE GAME
            game.switchToGameScreen();
        }        
    }
    
    /**
     * Called when the user presses a key on the keyboard.
     */    
    public void respondToKeyPress(int keyCode)
    {
        PathXDataModel data = (PathXDataModel)game.getDataModel();

        // CHEAT BY ONE MOVE. NOTE THAT IF WE HOLD THE C
        // KEY DOWN IT WILL CONTINUALLY CHEAT
        if (keyCode == KeyEvent.VK_C)
        {   
            /* THESE KEY CODES ARENT USED YET ADD MORE LATER***************************
            // ONLY DO THIS IF THE GAME IS NO OVER
            if (data.inProgress())
            {
                // FIND A MOVE IF THERE IS ONE
                SortTransaction move = data.getNextSwapTransaction();
                if (move != null)
                {
                    data.swapTiles(move.getFromIndex(), move.getToIndex());
                    game.getAudio().play(TheSortingHat.SortingHatPropertyType.AUDIO_CUE_CHEAT.toString(), false);
                }
            }
        }
        // UNDO THE LAST MOVE, AGAIN, U CAN BE HELD DOWN
        else if (keyCode == KeyEvent.VK_U)
        {
            // UNDO IS ONLY RELEVANT TO THE GAME SCREEN
            if (game.isCurrentScreenState(GAME_SCREEN_STATE))
            {
                data.undoLastMove();
                game.getAudio().play(TheSortingHat.SortingHatPropertyType.AUDIO_CUE_UNDO.toString(), false);                 
            }*/            
        }
        // WASD MOVES THE VIEWPORT
        else if (keyCode == KeyEvent.VK_UP)  game.getDataModel().getViewport().scroll(0,                VIEWPORT_INC);
        else if (keyCode == KeyEvent.VK_LEFT)  game.getDataModel().getViewport().scroll(VIEWPORT_INC,    0);
        else if (keyCode == KeyEvent.VK_DOWN)  game.getDataModel().getViewport().scroll(0,                -VIEWPORT_INC);
        else if (keyCode == KeyEvent.VK_RIGHT)  game.getDataModel().getViewport().scroll(-VIEWPORT_INC,     0);
        else if (keyCode == KeyEvent.VK_B);
        else if (keyCode == KeyEvent.VK_C);  
        else if (keyCode == KeyEvent.VK_E);
        else if (keyCode == KeyEvent.VK_F);
        else if (keyCode == KeyEvent.VK_G);
        else if (keyCode == KeyEvent.VK_H);
        else if (keyCode == KeyEvent.VK_L);
        else if (keyCode == KeyEvent.VK_M);
        else if (keyCode == KeyEvent.VK_O);
        else if (keyCode == KeyEvent.VK_P);
        else if (keyCode == KeyEvent.VK_Q);
        else if (keyCode == KeyEvent.VK_R);
        else if (keyCode == KeyEvent.VK_T);
        else if (keyCode == KeyEvent.VK_V);
        else if (keyCode == KeyEvent.VK_X);
        else if (keyCode == KeyEvent.VK_Y);
        else if (keyCode == KeyEvent.VK_Z);
    }
}
